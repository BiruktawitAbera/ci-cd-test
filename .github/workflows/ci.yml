name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # You can change the version if needed
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Run tests
    - name: Run tests
      run: |
        # Run your unit tests (adjust the command based on your setup)
        pytest

  static_analysis:
    runs-on: ubuntu-latest
    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Run static analysis with pylint
    - name: Run pylint
      run: |
        pip install pylint
        pylint app.py  # Replace with your script or module name

  dynamic_analysis:
    runs-on: ubuntu-latest
    steps:
    # Check out the code
    - name: Checkout code
      uses: actions/checkout@v3
    
    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Run dynamic analysis (e.g., run the app to check for runtime issues)
    - name: Run dynamic analysis (e.g., start Flask app)
      run: |
        python app.py &  # Run the Flask app in the background
        sleep 10  # Wait for the app to start
        # Here, you can add your test for dynamic analysis if needed.
        # E.g., checking for specific runtime issues or performing a load test.
        curl http://127.0.0.1:5000/  # Simple check to see if the app is running
        kill $(jobs -p)  # Stop the Flask app after the test

